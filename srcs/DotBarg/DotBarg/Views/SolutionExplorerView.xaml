<UserControl x:Class="DotBarg.Views.SolutionExplorerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:v="clr-namespace:DotBarg.Views"
             xmlns:c="clr-namespace:DotBarg.Views.Controls"
             xmlns:vm="clr-namespace:DotBarg.ViewModels"
             xmlns:m="clr-namespace:DotBarg.Models"
             xmlns:conv="clr-namespace:DotBarg.Converters"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
             xmlns:e="http://schemas.livet-experimentals.jp/2018/wpf"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        
        <conv:TreeNodeKindsToImageConverter x:Key="TreeNodeKindsToImageConverter" />
        <conv:TreeNodeKindsToStringConverter x:Key="TreeNodeKindsToStringConverter" />

        <!--
        Window.DataContext = MainWindowViewModel
        （UserControl.DataContext = SolutionExplorerViewModel）
        TreeView.TreeNodes の TreeNode.DataContext = TreeViewItemModel
        
        Command のバインド先は、MainWindowViewModel にしたい
        CommandParameter のバインド先は、TreeViewItemModel にしたい
        https://qiita.com/koara-local/items/9e5f9cbcf4a937c1d34d
        
        対応として、TreeView.TreeNodes の TreeNode の Tag プロパティに、（本UserControl の親となる）Window にバインドしているビューモデルを渡しておき、そちら経由で発見させるように修正
        -->

        <!-- ContextMenu を表示させたくない用の ContextMenu -->
        <ContextMenu x:Key="EmptyContextMenu" Visibility="Collapsed" />

        <ContextMenu x:Key="SolutionFileContextMenu">
            
            <MenuItem
                Header="プロジェクト間の呼び出し関係（全体）を表示"
                Command="{Binding
                    Path=PlacementTarget.Tag.SolutionFileContextMenuClickCommand,
                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding}" />

        </ContextMenu>

        <ContextMenu x:Key="ProjectFileContextMenu">

            <MenuItem
                Header="プロジェクト間の呼び出し関係（個別）を表示"
                Command="{Binding
                    Path=PlacementTarget.Tag.ProjectFileContextMenuClickCommand,
                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding}" />

        </ContextMenu>

        <ContextMenu x:Key="SourceFileContextMenu">

            <MenuItem
                Header="定義の追跡"
                Command="{Binding
                    Path=PlacementTarget.Tag.DefinitionDiscoveryContextMenuClickCommand,
                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding}" />

            <MenuItem
                Visibility="Collapsed"
                Header="ソースファイルの右クリックテスト"
                Command="{Binding
                    Path=PlacementTarget.Tag.SourceFileContextMenuClickCommand,
                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding}" />

        </ContextMenu>

    </UserControl.Resources>

    <i:Interaction.Triggers>

        <!-- 進捗画面をモーダル形式で表示するように設定 -->
        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="ShowProgressView">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:ProgressView}" />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <Grid>

        <c:TreeViewEx
            ItemsSource="{Binding Items}"
            VirtualizingStackPanel.IsVirtualizing="True"
            VirtualizingStackPanel.VirtualizationMode="Recycling">

            <i:Interaction.Triggers>

                <!-- TreeView.SelectedItem がバインドできない仕様に対する対応。変更したタイミングで同期をとる -->
                <i:EventTrigger EventName="SelectedItemChanged">
                    <l:TreeViewSetStateToSourceAction Property="SelectedItem" Source="{Binding SelectedItem, Mode=TwoWay}" />
                </i:EventTrigger>

            </i:Interaction.Triggers>

            <TreeView.ItemContainerStyle>

                <Style TargetType="TreeViewItem">
                    
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    
                    <!--
                    ノード未選択状態のノードに対して、右クリック → コンテキストメニュー表示の際、
                    ノードが選択された状態になってほしいため、コードビハインドにイベントハンドラを記載している
                    → WPF/TreeView 機能の強化対応みたいな位置づけ
                    -->
                    <EventSetter Event="TreeViewItem.MouseRightButtonDown" Handler="TreeViewItem_MouseRightButtonDown" />

                    <Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                    
                    <!-- 
                    以下 System.Triggers 内で指定している TreeNodeKinds 以外のノードを右クリックした場合、
                    ProjectFile ノードとしてコンテキストメニューが表示されてしまうバグの対応
                    
                    ContextMenu が未設定、または null を設定していても、親の ContextMenu が引き継がれてしまう仕様か？
                    対応としては、空の ContextMenu をセットする
                    （デフォルト値は、空の ContextMenu をセットしておいて、ContextMenu を表示させたいノードだけ 任意の ContextMenu で上書きする対応とする
                    -->
                    <!--<Setter Property="ContextMenu" Value="{x:Null}" />-->
                    <Setter Property="ContextMenu" Value="{Binding Source={StaticResource EmptyContextMenu}}" />

                    <Style.Triggers>
                        
                        <DataTrigger Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="SolutionFile">
                            <Setter Property="ContextMenu" Value="{Binding Source={StaticResource SolutionFileContextMenu}}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="CSharpProjectFile">
                            <Setter Property="ContextMenu" Value="{Binding Source={StaticResource ProjectFileContextMenu}}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="VBNetProjectFile">
                            <Setter Property="ContextMenu" Value="{Binding Source={StaticResource ProjectFileContextMenu}}" />
                        </DataTrigger>
                        
                        <DataTrigger Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="CSharpSourceFile">
                            <Setter Property="ContextMenu" Value="{Binding Source={StaticResource SourceFileContextMenu}}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="VBNetSourceFile">
                            <Setter Property="ContextMenu" Value="{Binding Source={StaticResource SourceFileContextMenu}}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="GeneratedFile">
                            <Setter Property="ContextMenu" Value="{Binding Source={StaticResource SourceFileContextMenu}}" />
                        </DataTrigger>

                    </Style.Triggers>
                </Style>

            </TreeView.ItemContainerStyle>

            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type m:TreeViewItemModel}" ItemsSource="{Binding Children}">

                    <StackPanel Orientation="Horizontal">

                        <Image Name="NodeImage" Source="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToImageConverter}}" Margin="0,0,5,0" />
                        <TextBlock Text="{Binding Text}" />

                    </StackPanel>

                    <HierarchicalDataTemplate.Triggers>

                        <!-- フォルダを展開したら、開かれたフォルダの画像に変える -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsExpanded}" Value="True" />
                                <Condition Binding="{Binding TreeNodeKinds, Converter={StaticResource TreeNodeKindsToStringConverter}}" Value="Folder" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="NodeImage" Property="Source" Value="/Images/Folder_Expand.png" />
                        </MultiDataTrigger>

                    </HierarchicalDataTemplate.Triggers>

                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>

        </c:TreeViewEx>

    </Grid>

</UserControl>
